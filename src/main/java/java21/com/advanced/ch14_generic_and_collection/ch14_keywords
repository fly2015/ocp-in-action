Using Method References
	- are another way to make the code easier to read
	four formats for method references:
	- Static methods
	- Instance methods on a particular instance
	- Instance methods on a parameter to be determined at runtime
	- Constructors
		constructor reference is a special type of method reference that uses new instead of a method
		
Using Wrapper Classes
	autoboxing/unboxing
	- one advantage of a wrapper class over a primitive is that it can hold a null value
	
Using Lists, Sets, Maps, and Queues
	List: an ordered collection of elements, allows duplicate entries
	Set: does not allow duplicate entries
	
	Queue: is a collection that orders its elements in a specific order for processing
	A typical queue processes its elements in a first‐in, first‐out order, but other orderings are
	possible.
	
	Map:  is a collection that maps keys to values, with no duplicate keys allowed
	-  Map doesn't implement the Collection interface
	
COMMON COLLECTIONS METHODS
	boolean add(E element)
	boolean remove(Object object)
	boolean isEmpty()
	int size()
	void clear()
	boolean contains(Object object)
	boolean removeIf(Predicate<? super E> filter)
	void forEach(Consumer<? super T> action)
	
DELETING WHILE LOOPING
	ConcurrentModificationException
	
Using List
List
	ArrayList
	LinkedList
	
Creating a List with a Factory
	Arrays.asList(varargs) -> Returns fixed size list backed by an array -> Can replace elem
	List.of(varargs) -> returns immutable list
	List.copyOf(collection)	-> Returns immutablelist with copy of original collection's values
			

Using Set
	HashSet
	TreeSet	
	- create an immutable Set in one line or make a copy of an existing one.
	Set<Character> letters = Set.of('z', 'o', 'o');
	Set<Character> copy = Set.copyOf(letters);
	
Using Queue			
	- FIFO
	- double‐ended queue: can insert and remove elements from both the front and back of the queue.
	- LinkedList is that it implements both the List and Queue interfaces -> The trade‐off is that it isn't as
	efficient as a “pure” queue
	
	- ArrayDeque -> pure queue
	
Queue Methods No Exception
	- offer -> add to the back 
	- poll -> remove and return next elem (or return null if the queue is empty)
	- peek -> return next element (or return null if the queue is empty)
	
Queue Methods With Exception
	- add -> add to the back of the queue and return true or throw exception.
	- remove -> Removes and returns next element or throws an exception if empty queue
	- element -> Returns next element or throws an exception if empty queue
	
	
USING THE MAP INTERFACE
	HashMap
	LinkedHashMap
	Map.of("key1", "value1", "key2", "value2")
	Map.of("key1", "value1", "key2");  -> This code compiles but throws an error at runtime
	
	Map.ofEntries(
		Map.entry("key1", "value1"),
		Map.entry("key1", "value1"))
	
** The data structures that involve sorting do not allow null values.
	Compile OK -> throw exception at Runtime

OLDER COLLECTIONS
	Vector -> List
	Hashtable -> HashMap
	Stack -> Queue	
	
Sorting Data
	COMPARABLE
	
	Keeping compareTo() and equals() Consistent	
	
	COMPARATOR
	COMPARING MULTIPLE FIELDS
		Helper static methods for building a Comparator:
			comparing(function)
			comparingDouble(function)
			comparingInt(function)
			comparingLong(function)
			naturalOrder()
			reverseOrder()
			
		Helper default methods that you can chain to a Comparator to further specify its behavior
			reversed()
			thenComparing(Function)
			thenComparingDouble(Function)
			thenComparingInt(Function)
			thenComparingLong(function)
			
SORTING AND SEARCHING			
	REVIEWING BINARYSEARCH()
	  - one less than the negated index of where the requested value would need to be inserted
	  
	  
Working with Generics
	formal type parameter
	
GENERIC CLASSES	
	TYPE ERASURE
	 - after the code compiles, your generics are actually just Object types.
	 The process of removing the generics syntax from your
		code is referred to as type erasure.
	 - Type erasure allows
		your code to be compatible with older versions of Java
		that do not contain generics.
	- The compiler adds the relevant casts for your code to work
	with this type of erased class.	

GENERIC INTERFACES
	There are 2 ways a class can approach implementing the interface
	-  specify the generic type in the implementation class
	-  create a generic class implement the interface
	
	RAW TYPES
	- The final way is to not use generics at all
	
WHAT YOU CAN'T DO WITH GENERIC TYPES
	- Calling a constructor
	- Creating an array of that generic type
	- Calling instanceof
	- Using a primitive type as  as a generic type parameter
	- Creating a static variable as a generic type parameter
	
	* Most of the limitations are due to type erasure
	- A reifiable type is a type whose type information is fully available at runtime
	
	
GENERIC METHODS
	OPTIONAL SYNTAX FOR INVOKING A GENERIC METHOD	
	
	- a method declare a generic parameter type, it is
	independent of the class generics. 	 
	GenericMethodTricky.java

BOUNDING GENERIC TYPES
	A bounded parameter type is a generic type that specifies a bound for the generic
	A wildcard generic type is an unknown generic type represented with a question mark ( ?)
	
	- Unbounded wildcard 
	- Upper bound <extends - point out the biggest>	
	- lower bound <super - point out the lowest>