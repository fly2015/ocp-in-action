Understanding Java Operators
	type:
		unary, binary, and ternary
	
	PRECEDENCE
		Post-unary: expression++, expression--
		Pre-unary operators: ++expression, --expression
		Other unary operators: -, !, ~, +, (type)
		Multiplication/division/modulus: *, /, %
		Addition/subtraction: +,-
		Shift operators: <<, >>, >>>
		Relational operators: <, >, <=, >=, instanceof
		Equal to/not equal to: ==, !=
		Logical operators: &, ^, |
		Short-circuit logical operators: &&, ||
		Ternary operators: boolean expression ? expression1 : expression2
		Assignment operators:
		=, +=, -=, *=, /=, %=, &=, ^=, |=, <<=, >>=, >>>=
		
	operand
	
	Unary
		cannot apply a negation operator (-) to a boolean expression, nor can you apply a logical complement operator (!) to a numeric expression
		predecrement/ post-increment
	
	Binary Arithmetic Operators
		modulus: For a given divisor y, the modulus operation results in a value between 0 and (y - 1) for positive dividends.
		floor value ->  the value without anything after the decimal point
		
	
NUMERIC PROMOTION
	Rules
	1. If two values have different data types, Java will automatically
	promote one of the values to the larger of the two data types.	
	
	2. If one of the values is integral and the other is floating-point,
	Java will automatically promote the integral value to the floating-point value’s data type.
	
	3. Smaller data types, namely, byte, short, and char, are first promoted to int any time they’re used with a Java binary
	arithmetic operator, even if neither of the operands is int.	
	(unary operators are excluded from this rule)
	
	4. After all promotion has occurred and the operands have the same data type, 
	the resulting value will have the same data type as its promoted operands	
		
Assigning Values
	Applying Casting ->  from a larger to smaller primitives
	
OVERFLOW AND UNDERFLOW
	Overflow is when a number is so large that it will no longer fit within the data type.
	so the system “wraps around” to the lowest negative value and counts up from there.
	Overflow.java
	
	Underflow, when the number is too low to fit in the data type, such as storing -200 in a byte
	Underflow.java
	
COMPOUND ASSIGNMENT OPERATORS

ASSIGNMENT OPERATOR RETURN VALUE
	AssigmentReturn.java
	
Comparing Values
	Equality operators (== , !=)
	If the numeric values are of different data types, the values are automatically promoted
	Comparing two boolean values
	Comparing two objects, including null and String value
	
	* cannot mix and match types	
	System.out.print(null == null); // true
	
RELATIONAL OPERATORS
	instanceof Operator
	for determining whether an arbitrary object is a member of a particular class or interface at runtime.
	
	Invalid instanceof
	null and the instanceof operator
	System.out.print(null instanceof null); // DOES NOT COMPILE
	
LOGICAL OPERATORS
	 (&), (|), and (^), may be applied to both numeric and boolean data types
	 When they’re applied to boolean data types, they’re referred to as logical operators
	 when they’re applied to numeric data types, they’re referred to as bitwise operators
	 
	 & Logical AND is true only if both values are true.
	 | Inclusive OR is true if at least one of the values is true.
	 ^ Exclusive XOR is true only if one value is true and the other is false.
	 
	 AND is only true if both operands are true.
	 Inclusive OR is only false if both operands are false.
	 Exclusive OR is only true if the operands are different.
	 
	SHORT-CIRCUIT OPERATORS
		&& Short-circuit AND is true only if both values are true. If the left side is false, then the right side will not be evaluated
		|| Short-circuit OR is true if at least one of the values is true. If the left side is true, then the right side will not be evaluated.
	
		Avoiding a NullPointerException
			A more common example of where short-circuit operators are used is checking for null objects before performing an operation	
			ShortCircuitPreventNull.java
			
		Checking for Unperformed Side Effects
			unperformed side effect -> alter a variable on the right side of the expression that may never be reached
			
Ternary Operator
	there is no requirement that second and third expressions in ternary operations have the same data types
	when there is no assignment
	
	
	TERNARY EXPRESSION AND UNPERFORMED SIDE EFFECTS
		 ternary expression can contain an unperformed side effect, as only one of the expressions on the right side will be evaluated at runtime
	